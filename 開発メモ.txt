連結演算においてブランクの無視はどう扱うべきか？



(alphabet | '_') + (alphabet | numeric | '_').Above0 の間に空白が割り込んでしまうのはマズい。
パーサ以前にトークナイザで処理する方式なら、正規表現で１トークンにしてしまえるので、問題は発生しなかった。
Parspellでは直接パーサで処理するので、空白が割り込まないようにする必要がある。

そもそも、空白を無視してはいけない状況とは？
	空白で区切られた要素を連結する時
		BNFでの要素の連続、関数型言語の引数、など
			オフサイドルールの場合、空白を挟んでも良いが改行を挟んではいけない事もある。
	正規表現でのマッチングに相当する時
　（識別子のように１文字目と２文字目以降を空白を挟まず連結させる時）
	（コメントや文字列リテラルのように、開始文字に続く空白も無視してはいけない時）


AnyマッチャーがInnerから失敗を受け取った時、その長さをどう反映するのか？
正規表現では否定は「１文字分の長さの否定」「否定先読み」「否定後読み」のみ。
((ラーメン)|(素麺)).Not のような否定は理論上無理。
ラーメンにも素麺にも合致しなかった場合は、何文字分の不一致として扱うべきか困る。
つまり、Notで否定できるのは長さが１で確定するSimpleCharマッチャーとAnyCharマッチャー。
そして長さゼロで確定する区切り文字系のマッチャーのみ。
それら以外にNotプロパティがあってはならない。
	Charマッチャー         →  マッチ長さが１なので否定可能。
	区切り文字             →  マッチ長さがゼロなので否定可能。
	否定先読み・否定後読み →  マッチ長さがゼロなので否定可能。

ネストの扱い
	トークナイズの段階で行頭空白の後にネストトークンを差し込んでおく案。
	行頭、空白、改行空白以外、の順で並んでいる時をネストとみなす。
	行頭、空白、行頭、といった空行はネストとみなさない。
	暫定的にはPython対応だけ念頭に置き、Haskellのようなインデント対処は考えない？
	インデント・デデントを必要としない
	
	空白・改行と同じく、インデント・デデントも無視するか否かを選べるようにすれば、良いと思われる。
	例えば、(){}[]のように括弧で囲われている式はインデント・デデントの無視を指定して定義すれば良い。
	前回のインデント・デデントで確定した現在ネストレベルと差が確認された時点で
	そのネストをインデント・デデントと確定するが、構文解析で無視される可能性がある以上は、
	その前段階であるトークナイズでインデント・デデントとは確定できない。
	
	ネストレベルはスタックで管理すべき？
	マッチ失敗で関数呼び出しから戻った時に適切に戻せるならスタックで管理しても良い。
	マッチ成功したものを反転させて非マッチとした時はどうなのか？
	それを更にマッチ成功に戻す時はどうなのか？
	反転の際にスタックの中身はどうするのか？
	ワカランからとりあえず実装してみるか？
	




文字列終わりを検知した時は、どうやって終われば良いのか？
反転不可能な「文字終わりエラー」を作る案。

マッチにNotプロパティを設ける。
IsSuccessプロパティを反転したインスタンスを返す。
文字列終わりのように反転不可能な失敗の場合、反転できないインスタンスを作成する。





文字マッチャーにおいて、走査位置が文字列末尾で、末尾トークンに対してマッチングを試みると、
長さ１の失敗マッチを生成してしまっている。


マッチ失敗の場合、問答無用でインデントをロールバックしているが、
aaaa.Not の場合、aaaaが失敗した時点でロールバックされ、
aaaa.Notで成功マッチに変換されるのに、ロールバックをなかったことにできない。

解決策の案
	〇〇Notマッチャーを〇〇の数だけ用意し、
	aaaa.Notプロパティでは、その〇〇Notマッチャーを返す。
別の解決策の案
	成功マッチに変換される際、ロールバックをなかった事にする。
	そもそもロールバックの処理を「過剰要素を消す」から「実際の要素を削らずに見かけの要素数を戻す」
	という処理に変える。
	マッチにインデントリストの要素数を格納しておき、成功に変換されると「見かけの要素数」を戻す。
	
	マッチに真の時のインデントリストの要素数・偽の時のインデントリストの要素数をそれぞれ保持させれば実装できそう。

